AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Scatter Gather

Parameters:
  RawDataBaseName:
    Type: String
    Default: "raw_data_covid_19"
    Description: "Name of the AWS Glue database to contain raw data tables."
  
  S3RawDataLocationURI:
    Type: String
    Default: "s3://covid19-lake/rearc-covid-19-nyt-data-in-usa/json/us-states"
    Description: "S3 location for raw sample data."

  RegionName:
    Type: String
    Default: 'eu-west-1'
    Description: Default region for deployment.
  
  SGProcessesTableName:
    Type: String
    Default: scatter_gather_processes
    Description: DynamoDB table name to store information by process triggered
  
  SGAggregateTableName:
    Type: String
    Default: scatter_gather_aggregate
    Description: DynamoDB table name to store information by scatter_gatter aggregated

Resources:
########################################################
# Glue table
########################################################
  GlueRawDataBase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref RawDataBaseName
        Description: Database Raw Data

  GlueRawDataNYTimesCovidTable:
    Type: 'AWS::Glue::Table'
    Properties: 
      CatalogId: !Ref AWS::AccountId     
      DatabaseName: !Ref GlueRawDataBase
      TableInput: 
        Description: "Raw Data on COVID-19 cases from NY Times at US state level."
        TableType: "EXTERNAL_TABLE"
        Retention: 0
        Name: covid_nytimes_states
        Parameters:
          has_encrypted_data: False
          classification: json
          typeOfData: file
        StorageDescriptor:
          Compressed: False
          InputFormat: "org.apache.hadoop.mapred.TextInputFormat"
          Location: !Ref S3RawDataLocationURI
          OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"
          StoredAsSubDirectories: false
          SerdeInfo:
            Parameters: {
              "paths": "date,state,fips,cases,deaths"
            }
            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
          Columns:
            - Type: string
              Name: date
              Comment: "reporting date"
            - Type: string
              Name: state
              Comment: ""
            - Type: string
              Name: fips
              Comment: "FIPS code"
            - Type: bigint
              Name: cases
              Comment: "# confirmed cases"
            - Type: bigint
              Name: deaths
              Comment: "# deaths"

########################################################
# S3 Bucket processed data
########################################################
  ProcessedDataS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - "-"
        - - "scatter-gather-processed-data"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

########################################################
# Lambda Function processor
########################################################
  ProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: processor_lambda.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies: 
        - AmazonAthenaFullAccess
        - AmazonS3FullAccess
        - AmazonDynamoDBFullAccess
      Timeout: 180
      MemorySize: 512
      Environment:
        Variables:
          ATHENA_RAW_DATABASE_NAME: !Ref RawDataBaseName
          S3_BUCKET_NAME: !Ref ProcessedDataS3Bucket
          SG_PROCESSES_TABLE_NAME: !Ref SGProcessesTableName
      Layers:
        - !Sub 'arn:aws:lambda:${RegionName}:017000801446:layer:AWSLambdaPowertoolsPythonV2:16'
        - !Sub  'arn:aws:lambda:${RegionName}:336392948345:layer:AWSSDKPandas-Python39:5'
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessorSqsQueue.Arn
            BatchSize: 1

########################################################
# SQS to trigger the Lambda Function processor
########################################################
  ProcessorSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 200
      QueueName: "processor_q"

########################################################
# DynamoDB tables
########################################################
  SGProcessesDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref SGProcessesTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1 
      KeySchema: 
        - 
          AttributeName: "scatter_gather_id"
          KeyType: "HASH"
        - 
          AttributeName: "process_id"
          KeyType: "RANGE"
      AttributeDefinitions: 
        - 
          AttributeName: "scatter_gather_id"
          AttributeType: "S"
        - 
          AttributeName: "process_id"
          AttributeType: "S"
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

  SGAggregateDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref SGAggregateTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1 
      KeySchema: 
        - 
          AttributeName: "scatter_gather_id"
          KeyType: "HASH"
      AttributeDefinitions: 
        - 
          AttributeName: "scatter_gather_id"
          AttributeType: "S"
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

########################################################
# Lambda Function Scatter
########################################################
  ScatterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: scatter_lambda.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies: 
        - AmazonDynamoDBFullAccess
        - AmazonAthenaFullAccess
        - AmazonS3FullAccess
        - AmazonSQSFullAccess
      Timeout: 180
      MemorySize: 512
      Environment:
        Variables:
          SG_PROCESSES_TABLE_NAME: !Ref SGProcessesTableName
          SG_AGGREGATE_TABLE_NAME: !Ref SGAggregateTableName
          ATHENA_RAW_DATABASE_NAME: !Ref RawDataBaseName
          QUEUE_URL: !GetAtt ProcessorSqsQueue.QueueUrl
      Layers:
        - !Sub 'arn:aws:lambda:${RegionName}:017000801446:layer:AWSLambdaPowertoolsPythonV2:16'
        - !Sub  'arn:aws:lambda:${RegionName}:336392948345:layer:AWSSDKPandas-Python39:5'

########################################################
# Lambda Function Aggregator
########################################################
  AggregatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: aggregator_lambda.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies: 
        - AmazonDynamoDBFullAccess
      Timeout: 180
      MemorySize: 128
      Environment:
        Variables:
          SG_AGGREGATE_TABLE_NAME: !Ref SGAggregateTableName
      Layers:
        - !Sub 'arn:aws:lambda:${RegionName}:017000801446:layer:AWSLambdaPowertoolsPythonV2:16'

  EventSourceSGProcessesDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 30
      Enabled: True
      FilterCriteria:
        Filters:
          - Pattern: '{"eventName":["MODIFY"]}'
      EventSourceArn: !GetAtt SGProcessesDBTable.StreamArn
      FunctionName: !GetAtt AggregatorFunction.Arn
      StartingPosition: LATEST

########################################################
# Lambda Function Gather
########################################################
  GatherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: gather_lambda.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies: 
        - AmazonDynamoDBFullAccess
      Timeout: 180
      MemorySize: 128
      Layers:
        - !Sub 'arn:aws:lambda:${RegionName}:017000801446:layer:AWSLambdaPowertoolsPythonV2:16'

  EventSourceSGAggregateDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 30
      Enabled: True
      FilterCriteria:
        Filters:
          - Pattern: '{"eventName":["MODIFY"]}'
      EventSourceArn: !GetAtt SGAggregateDBTable.StreamArn
      FunctionName: !GetAtt GatherFunction.Arn
      StartingPosition: LATEST
